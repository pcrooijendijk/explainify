{
    "DataTables": [
        {
            "id": 1,
            "message": "File name based on user input risks server-side request forgery.",
            "file": "file_downloads/DataTables/new/examples.php",
            "start_line": 4,
            "end_line": 4,
            "code_snippet": "\techo htmlspecialchars( file_get_contents( '../server_side/'.$_POST['src'] ) );"
        },
        {
            "id": 2,
            "message": "File name based on user input risks server-side request forgery.",
            "file": "file_downloads/DataTables/old/examples.php",
            "start_line": 4,
            "end_line": 4,
            "code_snippet": "\techo htmlspecialchars( file_get_contents( '../server_side/'.$_POST['src'] ) );"
        }
    ],
    "FreshRSS": [
        {
            "id": 3,
            "message": "File name based on user input risks server-side request forgery.",
            "file": "file_downloads/FreshRSS/new/ext.php",
            "start_line": 101,
            "end_line": 101,
            "code_snippet": "$mtime = @filemtime($absolute_filename);"
        },
        {
            "id": 4,
            "message": "File name based on user input risks server-side request forgery.",
            "file": "file_downloads/FreshRSS/new/ext.php",
            "start_line": 109,
            "end_line": 109,
            "code_snippet": "\treadfile($absolute_filename);"
        },
        {
            "id": 5,
            "message": "File name based on user input risks server-side request forgery.",
            "file": "file_downloads/FreshRSS/new/f.php",
            "start_line": 28,
            "end_line": 28,
            "code_snippet": "$ico_mtime = @filemtime($ico) ?: 0;"
        },
        {
            "id": 6,
            "message": "File name based on user input risks server-side request forgery.",
            "file": "file_downloads/FreshRSS/new/f.php",
            "start_line": 29,
            "end_line": 29,
            "code_snippet": "$txt_mtime = @filemtime($txt) ?: 0;"
        },
        {
            "id": 7,
            "message": "File name based on user input risks server-side request forgery.",
            "file": "file_downloads/FreshRSS/new/f.php",
            "start_line": 40,
            "end_line": 40,
            "code_snippet": "\t$url = file_get_contents($txt);"
        },
        {
            "id": 8,
            "message": "File name based on user input risks server-side request forgery.",
            "file": "file_downloads/FreshRSS/new/f.php",
            "start_line": 58,
            "end_line": 58,
            "code_snippet": "\t\ttouch($ico);"
        },
        {
            "id": 9,
            "message": "File name based on user input risks server-side request forgery.",
            "file": "file_downloads/FreshRSS/new/f.php",
            "start_line": 69,
            "end_line": 69,
            "code_snippet": "\treadfile($ico);"
        },
        {
            "id": 10,
            "message": "File name based on user input risks server-side request forgery.",
            "file": "file_downloads/FreshRSS/new/fever.php",
            "start_line": 161,
            "end_line": 161,
            "code_snippet": "\t\t\t$username = @file_get_contents(DATA_PATH . '/fever/.key-' . sha1(FreshRSS_Context::systemConf()->salt) . '-' . $feverKey . '.txt', false);"
        },
        {
            "id": 11,
            "message": "Make sure comparisons involving md5 values are strict (use `===` not `==`) to avoid type juggling issues",
            "file": "file_downloads/FreshRSS/new/fever.php",
            "start_line": 162,
            "end_line": 162,
            "code_snippet": "\t\t\tif ($username != false) {"
        },
        {
            "id": 12,
            "message": "Access-Control-Allow-Origin response header is set to \"*\". This will disable CORS Same Origin Policy restrictions.",
            "file": "file_downloads/FreshRSS/new/greader.php",
            "start_line": 997,
            "end_line": 997,
            "code_snippet": "\t\theader('Access-Control-Allow-Origin: *');"
        },
        {
            "id": 13,
            "message": "File name based on user input risks server-side request forgery.",
            "file": "file_downloads/FreshRSS/new/pshb.php",
            "start_line": 29,
            "end_line": 29,
            "code_snippet": "$canonical = @file_get_contents('keys/' . $key . '.txt');"
        },
        {
            "id": 14,
            "message": "File name based on user input risks server-side request forgery.",
            "file": "file_downloads/FreshRSS/new/pshb.php",
            "start_line": 43,
            "end_line": 43,
            "code_snippet": "$hubFile = @file_get_contents('feeds/' . $canonicalHash . '/!hub.json');"
        },
        {
            "id": 15,
            "message": "Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.",
            "file": "file_downloads/FreshRSS/new/pshb.php",
            "start_line": 46,
            "end_line": 46,
            "code_snippet": "\tunlink('keys/' . $key . '.txt');"
        },
        {
            "id": 16,
            "message": "File name based on user input risks server-side request forgery.",
            "file": "file_downloads/FreshRSS/new/pshb.php",
            "start_line": 46,
            "end_line": 46,
            "code_snippet": "\tunlink('keys/' . $key . '.txt');"
        },
        {
            "id": 17,
            "message": "Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.",
            "file": "file_downloads/FreshRSS/new/pshb.php",
            "start_line": 61,
            "end_line": 61,
            "code_snippet": "\tunlink('../../keys/' . $key . '.txt');"
        },
        {
            "id": 18,
            "message": "File name based on user input risks server-side request forgery.",
            "file": "file_downloads/FreshRSS/new/pshb.php",
            "start_line": 61,
            "end_line": 61,
            "code_snippet": "\tunlink('../../keys/' . $key . '.txt');"
        },
        {
            "id": 19,
            "message": "Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.",
            "file": "file_downloads/FreshRSS/new/pshb.php",
            "start_line": 145,
            "end_line": 145,
            "code_snippet": "\t\tunlink($userFilename);"
        },
        {
            "id": 20,
            "message": "Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.",
            "file": "file_downloads/FreshRSS/new/pshb.php",
            "start_line": 163,
            "end_line": 163,
            "code_snippet": "\t\t\tunlink($userFilename);"
        },
        {
            "id": 21,
            "message": "Access-Control-Allow-Origin response header is set to \"*\". This will disable CORS Same Origin Policy restrictions.",
            "file": "file_downloads/FreshRSS/new/query.php",
            "start_line": 171,
            "end_line": 171,
            "code_snippet": "header('Access-Control-Allow-Origin: *');"
        },
        {
            "id": 22,
            "message": "File name based on user input risks server-side request forgery.",
            "file": "file_downloads/FreshRSS/old/ext.php",
            "start_line": 99,
            "end_line": 99,
            "code_snippet": "$mtime = @filemtime($absolute_filename);"
        },
        {
            "id": 23,
            "message": "File name based on user input risks server-side request forgery.",
            "file": "file_downloads/FreshRSS/old/ext.php",
            "start_line": 107,
            "end_line": 107,
            "code_snippet": "\treadfile($absolute_filename);"
        },
        {
            "id": 24,
            "message": "File name based on user input risks server-side request forgery.",
            "file": "file_downloads/FreshRSS/old/f.php",
            "start_line": 25,
            "end_line": 25,
            "code_snippet": "$ico_mtime = @filemtime($ico) ?: 0;"
        },
        {
            "id": 25,
            "message": "File name based on user input risks server-side request forgery.",
            "file": "file_downloads/FreshRSS/old/f.php",
            "start_line": 26,
            "end_line": 26,
            "code_snippet": "$txt_mtime = @filemtime($txt) ?: 0;"
        },
        {
            "id": 26,
            "message": "File name based on user input risks server-side request forgery.",
            "file": "file_downloads/FreshRSS/old/f.php",
            "start_line": 37,
            "end_line": 37,
            "code_snippet": "\t$url = file_get_contents($txt);"
        },
        {
            "id": 27,
            "message": "File name based on user input risks server-side request forgery.",
            "file": "file_downloads/FreshRSS/old/f.php",
            "start_line": 55,
            "end_line": 55,
            "code_snippet": "\t\ttouch($ico);"
        },
        {
            "id": 28,
            "message": "File name based on user input risks server-side request forgery.",
            "file": "file_downloads/FreshRSS/old/f.php",
            "start_line": 67,
            "end_line": 67,
            "code_snippet": "\treadfile($ico);"
        },
        {
            "id": 29,
            "message": "File name based on user input risks server-side request forgery.",
            "file": "file_downloads/FreshRSS/old/fever.php",
            "start_line": 159,
            "end_line": 159,
            "code_snippet": "\t\t\t$username = @file_get_contents(DATA_PATH . '/fever/.key-' . sha1(FreshRSS_Context::systemConf()->salt) . '-' . $feverKey . '.txt', false);"
        },
        {
            "id": 30,
            "message": "Make sure comparisons involving md5 values are strict (use `===` not `==`) to avoid type juggling issues",
            "file": "file_downloads/FreshRSS/old/fever.php",
            "start_line": 160,
            "end_line": 160,
            "code_snippet": "\t\t\tif ($username != false) {"
        },
        {
            "id": 31,
            "message": "Access-Control-Allow-Origin response header is set to \"*\". This will disable CORS Same Origin Policy restrictions.",
            "file": "file_downloads/FreshRSS/old/greader.php",
            "start_line": 994,
            "end_line": 994,
            "code_snippet": "\t\theader('Access-Control-Allow-Origin: *');"
        },
        {
            "id": 32,
            "message": "File name based on user input risks server-side request forgery.",
            "file": "file_downloads/FreshRSS/old/pshb.php",
            "start_line": 28,
            "end_line": 28,
            "code_snippet": "$canonical = @file_get_contents('keys/' . $key . '.txt');"
        },
        {
            "id": 33,
            "message": "File name based on user input risks server-side request forgery.",
            "file": "file_downloads/FreshRSS/old/pshb.php",
            "start_line": 42,
            "end_line": 42,
            "code_snippet": "$hubFile = @file_get_contents('feeds/' . $canonicalHash . '/!hub.json');"
        },
        {
            "id": 34,
            "message": "Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.",
            "file": "file_downloads/FreshRSS/old/pshb.php",
            "start_line": 45,
            "end_line": 45,
            "code_snippet": "\tunlink('keys/' . $key . '.txt');"
        },
        {
            "id": 35,
            "message": "File name based on user input risks server-side request forgery.",
            "file": "file_downloads/FreshRSS/old/pshb.php",
            "start_line": 45,
            "end_line": 45,
            "code_snippet": "\tunlink('keys/' . $key . '.txt');"
        },
        {
            "id": 36,
            "message": "Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.",
            "file": "file_downloads/FreshRSS/old/pshb.php",
            "start_line": 60,
            "end_line": 60,
            "code_snippet": "\tunlink('../../keys/' . $key . '.txt');"
        },
        {
            "id": 37,
            "message": "File name based on user input risks server-side request forgery.",
            "file": "file_downloads/FreshRSS/old/pshb.php",
            "start_line": 60,
            "end_line": 60,
            "code_snippet": "\tunlink('../../keys/' . $key . '.txt');"
        },
        {
            "id": 38,
            "message": "Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.",
            "file": "file_downloads/FreshRSS/old/pshb.php",
            "start_line": 144,
            "end_line": 144,
            "code_snippet": "\t\tunlink($userFilename);"
        },
        {
            "id": 39,
            "message": "Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.",
            "file": "file_downloads/FreshRSS/old/pshb.php",
            "start_line": 162,
            "end_line": 162,
            "code_snippet": "\t\t\tunlink($userFilename);"
        },
        {
            "id": 40,
            "message": "Access-Control-Allow-Origin response header is set to \"*\". This will disable CORS Same Origin Policy restrictions.",
            "file": "file_downloads/FreshRSS/old/query.php",
            "start_line": 168,
            "end_line": 168,
            "code_snippet": "header('Access-Control-Allow-Origin: *');"
        }
    ],
    "KnowageLabs": [
        {
            "id": 41,
            "message": "When data from an untrusted source is put into a logger and not neutralized correctly, an attacker could forge log entries or include malicious content.",
            "file": "file_downloads/KnowageLabs/new/MetaService.java",
            "start_line": 728,
            "end_line": 739,
            "code_snippet": "\t\t\tString modelName = req.getParameter(\"model\");\n\t\t\tString schemaName = req.getParameter(\"schema\");\n\t\t\tString catalogName = req.getParameter(\"catalog\");\n\t\t\tString isForRegistry = req.getParameter(\"registry\");\n\t\t\tString includeSourcesValue = req.getParameter(\"includeSources\");\n\n\t\t\tsetProfileDialectThreadLocal(model);\n\n\t\t\tlogger.debug(\"Loading Business Model entity of metamodel...\");\n\t\t\tBusinessModel businessModel = model.getBusinessModels().get(0);\n\n\t\t\tlogger.debug(\"setting model name [\" + modelName + \"]\");"
        },
        {
            "id": 42,
            "message": "When data from an untrusted source is put into a logger and not neutralized correctly, an attacker could forge log entries or include malicious content.",
            "file": "file_downloads/KnowageLabs/new/MetaService.java",
            "start_line": 729,
            "end_line": 743,
            "code_snippet": "\t\t\tString schemaName = req.getParameter(\"schema\");\n\t\t\tString catalogName = req.getParameter(\"catalog\");\n\t\t\tString isForRegistry = req.getParameter(\"registry\");\n\t\t\tString includeSourcesValue = req.getParameter(\"includeSources\");\n\n\t\t\tsetProfileDialectThreadLocal(model);\n\n\t\t\tlogger.debug(\"Loading Business Model entity of metamodel...\");\n\t\t\tBusinessModel businessModel = model.getBusinessModels().get(0);\n\n\t\t\tlogger.debug(\"setting model name [\" + modelName + \"]\");\n\t\t\t// set specified model name\n\t\t\tsetModelName(businessModel, modelName);\n\n\t\t\tlogger.debug(\"setting schema name [\" + schemaName + \"]\");"
        },
        {
            "id": 43,
            "message": "When data from an untrusted source is put into a logger and not neutralized correctly, an attacker could forge log entries or include malicious content.",
            "file": "file_downloads/KnowageLabs/new/MetaService.java",
            "start_line": 730,
            "end_line": 747,
            "code_snippet": "\t\t\tString catalogName = req.getParameter(\"catalog\");\n\t\t\tString isForRegistry = req.getParameter(\"registry\");\n\t\t\tString includeSourcesValue = req.getParameter(\"includeSources\");\n\n\t\t\tsetProfileDialectThreadLocal(model);\n\n\t\t\tlogger.debug(\"Loading Business Model entity of metamodel...\");\n\t\t\tBusinessModel businessModel = model.getBusinessModels().get(0);\n\n\t\t\tlogger.debug(\"setting model name [\" + modelName + \"]\");\n\t\t\t// set specified model name\n\t\t\tsetModelName(businessModel, modelName);\n\n\t\t\tlogger.debug(\"setting schema name [\" + schemaName + \"]\");\n\t\t\t// set specified schema name for generation\n\t\t\tsetSchemaName(businessModel, schemaName);\n\n\t\t\tlogger.debug(\"setting catalog name [\" + catalogName + \"]\");"
        },
        {
            "id": 44,
            "message": "When data from an untrusted source is put into a logger and not neutralized correctly, an attacker could forge log entries or include malicious content.",
            "file": "file_downloads/KnowageLabs/new/MetaService.java",
            "start_line": 739,
            "end_line": 739,
            "code_snippet": "\t\t\tlogger.debug(\"setting model name [\" + modelName + \"]\");"
        },
        {
            "id": 45,
            "message": "When data from an untrusted source is put into a logger and not neutralized correctly, an attacker could forge log entries or include malicious content.",
            "file": "file_downloads/KnowageLabs/new/MetaService.java",
            "start_line": 743,
            "end_line": 743,
            "code_snippet": "\t\t\tlogger.debug(\"setting schema name [\" + schemaName + \"]\");"
        },
        {
            "id": 46,
            "message": "When data from an untrusted source is put into a logger and not neutralized correctly, an attacker could forge log entries or include malicious content.",
            "file": "file_downloads/KnowageLabs/new/MetaService.java",
            "start_line": 747,
            "end_line": 747,
            "code_snippet": "\t\t\tlogger.debug(\"setting catalog name [\" + catalogName + \"]\");"
        },
        {
            "id": 47,
            "message": "Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path.",
            "file": "file_downloads/KnowageLabs/new/MetaService.java",
            "start_line": 790,
            "end_line": 790,
            "code_snippet": "\t\t\t\t\tInputStream inputStream = new FileInputStream(tmpDirJarFile + File.separator + filename);"
        },
        {
            "id": 48,
            "message": "Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.",
            "file": "file_downloads/KnowageLabs/new/MetaService.java",
            "start_line": 1554,
            "end_line": 1554,
            "code_snippet": "\t\t\tt.printStackTrace();"
        },
        {
            "id": 49,
            "message": "When data from an untrusted source is put into a logger and not neutralized correctly, an attacker could forge log entries or include malicious content.",
            "file": "file_downloads/KnowageLabs/old/MetaService.java",
            "start_line": 726,
            "end_line": 737,
            "code_snippet": "\t\t\t// meta model version (content)\n\t\t\tString modelName = req.getParameter(\"model\");\n\t\t\tString schemaName = req.getParameter(\"schema\");\n\t\t\tString catalogName = req.getParameter(\"catalog\");\n\t\t\tString isForRegistry = req.getParameter(\"registry\");\n\t\t\tString includeSourcesValue = req.getParameter(\"includeSources\");\n\n\t\t\tsetProfileDialectThreadLocal(model);\n\n\t\t\tlogger.debug(\"Loading Business Model entity of metamodel...\");\n\t\t\tBusinessModel businessModel = model.getBusinessModels().get(0);"
        },
        {
            "id": 50,
            "message": "When data from an untrusted source is put into a logger and not neutralized correctly, an attacker could forge log entries or include malicious content.",
            "file": "file_downloads/KnowageLabs/old/MetaService.java",
            "start_line": 727,
            "end_line": 741,
            "code_snippet": "\t\t\tString modelName = req.getParameter(\"model\");\n\t\t\tString schemaName = req.getParameter(\"schema\");\n\t\t\tString catalogName = req.getParameter(\"catalog\");\n\t\t\tString isForRegistry = req.getParameter(\"registry\");\n\t\t\tString includeSourcesValue = req.getParameter(\"includeSources\");\n\n\t\t\tsetProfileDialectThreadLocal(model);\n\n\t\t\tlogger.debug(\"Loading Business Model entity of metamodel...\");\n\t\t\tBusinessModel businessModel = model.getBusinessModels().get(0);\n\n\t\t\tlogger.debug(\"setting model name [\" + modelName + \"]\");\n\t\t\t// set specified model name\n\t\t\tsetModelName(businessModel, modelName);"
        },
        {
            "id": 51,
            "message": "When data from an untrusted source is put into a logger and not neutralized correctly, an attacker could forge log entries or include malicious content.",
            "file": "file_downloads/KnowageLabs/old/MetaService.java",
            "start_line": 728,
            "end_line": 745,
            "code_snippet": "\t\t\tString schemaName = req.getParameter(\"schema\");\n\t\t\tString catalogName = req.getParameter(\"catalog\");\n\t\t\tString isForRegistry = req.getParameter(\"registry\");\n\t\t\tString includeSourcesValue = req.getParameter(\"includeSources\");\n\n\t\t\tsetProfileDialectThreadLocal(model);\n\n\t\t\tlogger.debug(\"Loading Business Model entity of metamodel...\");\n\t\t\tBusinessModel businessModel = model.getBusinessModels().get(0);\n\n\t\t\tlogger.debug(\"setting model name [\" + modelName + \"]\");\n\t\t\t// set specified model name\n\t\t\tsetModelName(businessModel, modelName);\n\n\t\t\tlogger.debug(\"setting schema name [\" + schemaName + \"]\");\n\t\t\t// set specified schema name for generation\n\t\t\tsetSchemaName(businessModel, schemaName);"
        },
        {
            "id": 52,
            "message": "When data from an untrusted source is put into a logger and not neutralized correctly, an attacker could forge log entries or include malicious content.",
            "file": "file_downloads/KnowageLabs/old/MetaService.java",
            "start_line": 737,
            "end_line": 737,
            "code_snippet": ""
        },
        {
            "id": 53,
            "message": "When data from an untrusted source is put into a logger and not neutralized correctly, an attacker could forge log entries or include malicious content.",
            "file": "file_downloads/KnowageLabs/old/MetaService.java",
            "start_line": 741,
            "end_line": 741,
            "code_snippet": ""
        },
        {
            "id": 54,
            "message": "When data from an untrusted source is put into a logger and not neutralized correctly, an attacker could forge log entries or include malicious content.",
            "file": "file_downloads/KnowageLabs/old/MetaService.java",
            "start_line": 745,
            "end_line": 745,
            "code_snippet": ""
        },
        {
            "id": 55,
            "message": "Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path.",
            "file": "file_downloads/KnowageLabs/old/MetaService.java",
            "start_line": 788,
            "end_line": 788,
            "code_snippet": "\t\t\t\t\tlogger.debug(\"Temporary directory jar file: \" + tmpDirJarFile);"
        },
        {
            "id": 56,
            "message": "Possible active debug code detected. Deploying an application with debug code can create unintended entry points or expose sensitive information.",
            "file": "file_downloads/KnowageLabs/old/MetaService.java",
            "start_line": 1553,
            "end_line": 1553,
            "code_snippet": "\t\t} catch (Throwable t) {"
        }
    ],
    "auth0": [
        {
            "id": 57,
            "message": "Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.",
            "file": "file_downloads/auth0/new/HttpRequestTest.php",
            "start_line": 209,
            "end_line": 209,
            "code_snippet": "        @unlink($tempFile);"
        },
        {
            "id": 58,
            "message": "Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.",
            "file": "file_downloads/auth0/new/HttpRequestTest.php",
            "start_line": 225,
            "end_line": 225,
            "code_snippet": "        @unlink($tempFile);"
        }
    ],
    "civetweb": [
        {
            "id": 59,
            "message": "Insecure WebSocket Detected. WebSocket Secure (wss) should be used for all WebSocket connections.",
            "file": "file_downloads/civetweb/new/civetweb.c",
            "start_line": 18835,
            "end_line": 18835,
            "code_snippet": "                         {\"ws://\", 5, 80},"
        },
        {
            "id": 60,
            "message": "Insecure WebSocket Detected. WebSocket Secure (wss) should be used for all WebSocket connections.",
            "file": "file_downloads/civetweb/old/civetweb.c",
            "start_line": 18830,
            "end_line": 18830,
            "code_snippet": "                         {\"ws://\", 5, 80},"
        }
    ],
    "danny-avila": [
        {
            "id": 61,
            "message": "Depending on the context, user control data in `Object.assign` can cause web response to include data that it should not have or can lead to a mass assignment vulnerability.",
            "file": "file_downloads/danny-avila/new/v1.js",
            "start_line": 271,
            "end_line": 274,
            "code_snippet": "    const newAgentData = Object.assign(cloneData, {\n      id: newAgentId,\n      author: userId,\n    });"
        },
        {
            "id": 62,
            "message": "Depending on the context, user control data in `Object.assign` can cause web response to include data that it should not have or can lead to a mass assignment vulnerability.",
            "file": "file_downloads/danny-avila/old/v1.js",
            "start_line": 61,
            "end_line": 68,
            "code_snippet": "    Object.assign(agentData, {\n      author: userId,\n      name,\n      description,\n      instructions,\n      provider,\n      model,\n    });"
        },
        {
            "id": 63,
            "message": "JSON injection occurs when untrusted input is incorporated into a JavaScript object without proper validation or sanitization. When using methods like Object.assign, malicious input can override or add unintended properties to the object. Attackers may inject properties that alter the application's behavior. Validate the structure and content of input data to ensure it adheres to expected schemas. Reject inputs containing unexpected or disallowed properties.",
            "file": "file_downloads/danny-avila/old/v1.js",
            "start_line": 61,
            "end_line": 68,
            "code_snippet": "    Object.assign(agentData, {\n      author: userId,\n      name,\n      description,\n      instructions,\n      provider,\n      model,\n    });"
        },
        {
            "id": 64,
            "message": "Depending on the context, user control data in `Object.assign` can cause web response to include data that it should not have or can lead to a mass assignment vulnerability.",
            "file": "file_downloads/danny-avila/old/v1.js",
            "start_line": 262,
            "end_line": 265,
            "code_snippet": "    const newAgentData = Object.assign(cloneData, {\n      id: newAgentId,\n      author: userId,\n    });"
        }
    ],
    "discourse": [
        {
            "id": 65,
            "message": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities",
            "file": "file_downloads/discourse/new/rich-editor-extension.js",
            "start_line": 51,
            "end_line": 54,
            "code_snippet": "            metaElement.innerHTML = i18n(\"chat.quote.original_channel\", {\n              channel: replaceEmoji(node.attrs.channel),\n              channelLink,\n            });"
        },
        {
            "id": 66,
            "message": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities",
            "file": "file_downloads/discourse/new/rich-editor-extension.js",
            "start_line": 61,
            "end_line": 63,
            "code_snippet": "            channelLinkElement.innerHTML = `#${replaceEmoji(\n              node.attrs.channel\n            )}`;"
        },
        {
            "id": 67,
            "message": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities",
            "file": "file_downloads/discourse/new/rich-editor-extension.js",
            "start_line": 75,
            "end_line": 78,
            "code_snippet": "        userElement.innerHTML = `\n          <span class=\"chat-transcript-username\">${node.attrs.username}</span>\n          <span class=\"chat-transcript-datetime\">${formattedDateTime}</span>\n        `;"
        },
        {
            "id": 68,
            "message": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities",
            "file": "file_downloads/discourse/new/rich-editor-extension.js",
            "start_line": 82,
            "end_line": 82,
            "code_snippet": "        messagesElement.innerHTML = node.attrs.html;"
        },
        {
            "id": 69,
            "message": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities",
            "file": "file_downloads/discourse/new/rich-editor-extension.js",
            "start_line": 106,
            "end_line": 108,
            "code_snippet": "          threadTitleElement.innerHTML = node.attrs.threadTitle\n            ? replaceEmoji(node.attrs.threadTitle)\n            : i18n(\"chat.quote.default_thread_title\");"
        },
        {
            "id": 70,
            "message": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities",
            "file": "file_downloads/discourse/new/rich-editor-extension.js",
            "start_line": 123,
            "end_line": 123,
            "code_snippet": "            threadDetailsElement.innerHTML += node.attrs.threadHtml;"
        },
        {
            "id": 71,
            "message": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities",
            "file": "file_downloads/discourse/old/rich-editor-extension.js",
            "start_line": 51,
            "end_line": 54,
            "code_snippet": "            metaElement.innerHTML = i18n(\"chat.quote.original_channel\", {\n              channel: emojiUnescape(node.attrs.channel),\n              channelLink,\n            });"
        },
        {
            "id": 72,
            "message": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities",
            "file": "file_downloads/discourse/old/rich-editor-extension.js",
            "start_line": 61,
            "end_line": 63,
            "code_snippet": "            channelLinkElement.innerHTML = `#${emojiUnescape(\n              node.attrs.channel\n            )}`;"
        },
        {
            "id": 73,
            "message": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities",
            "file": "file_downloads/discourse/old/rich-editor-extension.js",
            "start_line": 75,
            "end_line": 78,
            "code_snippet": "        userElement.innerHTML = `\n          <span class=\"chat-transcript-username\">${node.attrs.username}</span>\n          <span class=\"chat-transcript-datetime\">${formattedDateTime}</span>\n        `;"
        },
        {
            "id": 74,
            "message": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities",
            "file": "file_downloads/discourse/old/rich-editor-extension.js",
            "start_line": 82,
            "end_line": 82,
            "code_snippet": "        messagesElement.innerHTML = node.attrs.html;"
        },
        {
            "id": 75,
            "message": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities",
            "file": "file_downloads/discourse/old/rich-editor-extension.js",
            "start_line": 106,
            "end_line": 108,
            "code_snippet": "          threadTitleElement.innerHTML = node.attrs.threadTitle\n            ? emojiUnescape(node.attrs.threadTitle)\n            : i18n(\"chat.quote.default_thread_title\");"
        },
        {
            "id": 76,
            "message": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities",
            "file": "file_downloads/discourse/old/rich-editor-extension.js",
            "start_line": 123,
            "end_line": 123,
            "code_snippet": "            threadDetailsElement.innerHTML += node.attrs.threadHtml;"
        }
    ],
    "formbricks": [
        {
            "id": 77,
            "message": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).",
            "file": "file_downloads/formbricks/new/jwt.test.ts",
            "start_line": 249,
            "end_line": 249,
            "code_snippet": "      const legacyToken = jwt.sign({ email: mockUser.email }, TEST_NEXTAUTH_SECRET);"
        },
        {
            "id": 78,
            "message": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).",
            "file": "file_downloads/formbricks/new/jwt.test.ts",
            "start_line": 255,
            "end_line": 255,
            "code_snippet": "      const token = jwt.sign({ email: \"test@example.com\" }, TEST_NEXTAUTH_SECRET);"
        },
        {
            "id": 79,
            "message": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).",
            "file": "file_downloads/formbricks/new/jwt.test.ts",
            "start_line": 294,
            "end_line": 294,
            "code_snippet": "      const tokenWithoutEmail = jwt.sign({ surveyId: \"test-survey-id\" }, TEST_NEXTAUTH_SECRET);"
        },
        {
            "id": 80,
            "message": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).",
            "file": "file_downloads/formbricks/new/jwt.test.ts",
            "start_line": 310,
            "end_line": 310,
            "code_snippet": "        TEST_NEXTAUTH_SECRET"
        },
        {
            "id": 81,
            "message": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).",
            "file": "file_downloads/formbricks/new/jwt.test.ts",
            "start_line": 328,
            "end_line": 328,
            "code_snippet": "        TEST_NEXTAUTH_SECRET"
        },
        {
            "id": 82,
            "message": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).",
            "file": "file_downloads/formbricks/new/jwt.test.ts",
            "start_line": 342,
            "end_line": 342,
            "code_snippet": "      const legacyToken = jwt.sign({ email: `encrypted_${mockUser.email}` }, TEST_NEXTAUTH_SECRET + surveyId);"
        },
        {
            "id": 83,
            "message": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).",
            "file": "file_downloads/formbricks/new/jwt.test.ts",
            "start_line": 350,
            "end_line": 350,
            "code_snippet": "      const invalidToken = jwt.sign({ email: \"encrypted_test@example.com\" }, \"wrong-secret\");"
        },
        {
            "id": 84,
            "message": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).",
            "file": "file_downloads/formbricks/new/jwt.test.ts",
            "start_line": 367,
            "end_line": 367,
            "code_snippet": "        TEST_NEXTAUTH_SECRET + correctSurveyId"
        },
        {
            "id": 85,
            "message": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).",
            "file": "file_downloads/formbricks/new/jwt.test.ts",
            "start_line": 401,
            "end_line": 401,
            "code_snippet": "      const invalidToken = jwt.sign({ id: \"test-id\" }, DIFFERENT_SECRET);"
        },
        {
            "id": 86,
            "message": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).",
            "file": "file_downloads/formbricks/new/jwt.test.ts",
            "start_line": 406,
            "end_line": 406,
            "code_snippet": "      const tokenWithoutId = jwt.sign({ email: mockUser.email }, TEST_NEXTAUTH_SECRET);"
        },
        {
            "id": 87,
            "message": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).",
            "file": "file_downloads/formbricks/new/jwt.test.ts",
            "start_line": 412,
            "end_line": 412,
            "code_snippet": "      const token = jwt.sign({ id: mockUser.id }, TEST_NEXTAUTH_SECRET);"
        },
        {
            "id": 88,
            "message": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).",
            "file": "file_downloads/formbricks/new/jwt.test.ts",
            "start_line": 422,
            "end_line": 422,
            "code_snippet": "      const legacyToken = jwt.sign({ id: `encrypted_${mockUser.id}` }, TEST_NEXTAUTH_SECRET + mockUser.email);"
        },
        {
            "id": 89,
            "message": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).",
            "file": "file_downloads/formbricks/new/jwt.test.ts",
            "start_line": 434,
            "end_line": 434,
            "code_snippet": "      const legacyToken = jwt.sign({ id: `encrypted_${mockUser.id}` }, TEST_NEXTAUTH_SECRET + mockUser.email);"
        },
        {
            "id": 90,
            "message": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).",
            "file": "file_downloads/formbricks/new/jwt.test.ts",
            "start_line": 446,
            "end_line": 446,
            "code_snippet": "      const invalidToken = jwt.sign({ id: \"encrypted_test-id\" }, \"wrong-secret\");"
        },
        {
            "id": 91,
            "message": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).",
            "file": "file_downloads/formbricks/new/jwt.test.ts",
            "start_line": 482,
            "end_line": 482,
            "code_snippet": "      const tokenWithoutInviteId = jwt.sign({ email: mockUser.email }, TEST_NEXTAUTH_SECRET);"
        },
        {
            "id": 92,
            "message": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).",
            "file": "file_downloads/formbricks/new/jwt.test.ts",
            "start_line": 487,
            "end_line": 487,
            "code_snippet": "      const tokenWithoutEmail = jwt.sign({ inviteId: \"test-invite-id\" }, TEST_NEXTAUTH_SECRET);"
        },
        {
            "id": 93,
            "message": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).",
            "file": "file_downloads/formbricks/new/jwt.test.ts",
            "start_line": 502,
            "end_line": 502,
            "code_snippet": "        TEST_NEXTAUTH_SECRET"
        },
        {
            "id": 94,
            "message": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).",
            "file": "file_downloads/formbricks/new/jwt.test.ts",
            "start_line": 518,
            "end_line": 518,
            "code_snippet": "        DIFFERENT_SECRET"
        },
        {
            "id": 95,
            "message": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).",
            "file": "file_downloads/formbricks/new/jwt.test.ts",
            "start_line": 539,
            "end_line": 539,
            "code_snippet": "      const token = jwt.sign({ foo: \"bar\" }, TEST_NEXTAUTH_SECRET);"
        },
        {
            "id": 96,
            "message": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).",
            "file": "file_downloads/formbricks/new/jwt.test.ts",
            "start_line": 546,
            "end_line": 546,
            "code_snippet": "      const token = jwt.sign({ email: \"test@example.com\" }, TEST_NEXTAUTH_SECRET);"
        },
        {
            "id": 97,
            "message": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).",
            "file": "file_downloads/formbricks/new/jwt.test.ts",
            "start_line": 553,
            "end_line": 553,
            "code_snippet": "      const token = jwt.sign({ id: \"test-id\" }, TEST_NEXTAUTH_SECRET);"
        },
        {
            "id": 98,
            "message": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).",
            "file": "file_downloads/formbricks/new/jwt.test.ts",
            "start_line": 565,
            "end_line": 565,
            "code_snippet": "      const token = jwt.sign(payload, TEST_NEXTAUTH_SECRET);"
        },
        {
            "id": 99,
            "message": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).",
            "file": "file_downloads/formbricks/new/jwt.test.ts",
            "start_line": 576,
            "end_line": 576,
            "code_snippet": "        DIFFERENT_SECRET"
        },
        {
            "id": 100,
            "message": "Detected a hardcoded hmac key. Avoid hardcoding secrets and consider using an alternate option such as reading the secret from a config file or using an environment variable.",
            "file": "file_downloads/formbricks/new/jwt.test.ts",
            "start_line": 684,
            "end_line": 685,
            "code_snippet": "        const signature = crypto\n          .createHmac(\"sha256\", TEST_NEXTAUTH_SECRET)"
        },
        {
            "id": 101,
            "message": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).",
            "file": "file_downloads/formbricks/new/jwt.test.ts",
            "start_line": 775,
            "end_line": 775,
            "code_snippet": "          TEST_NEXTAUTH_SECRET"
        },
        {
            "id": 102,
            "message": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).",
            "file": "file_downloads/formbricks/new/jwt.test.ts",
            "start_line": 788,
            "end_line": 788,
            "code_snippet": "          TEST_NEXTAUTH_SECRET"
        },
        {
            "id": 103,
            "message": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).",
            "file": "file_downloads/formbricks/new/jwt.test.ts",
            "start_line": 824,
            "end_line": 824,
            "code_snippet": "          TEST_NEXTAUTH_SECRET"
        },
        {
            "id": 104,
            "message": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).",
            "file": "file_downloads/formbricks/new/jwt.test.ts",
            "start_line": 848,
            "end_line": 848,
            "code_snippet": "          const token = jwt.sign({ id: \"encrypted_malicious\" }, TEST_NEXTAUTH_SECRET);"
        },
        {
            "id": 105,
            "message": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).",
            "file": "file_downloads/formbricks/new/jwt.test.ts",
            "start_line": 876,
            "end_line": 876,
            "code_snippet": "        const legacyToken = jwt.sign({ id: mockUser.id }, TEST_NEXTAUTH_SECRET);"
        },
        {
            "id": 106,
            "message": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).",
            "file": "file_downloads/formbricks/new/jwt.test.ts",
            "start_line": 895,
            "end_line": 895,
            "code_snippet": "          TEST_NEXTAUTH_SECRET"
        },
        {
            "id": 107,
            "message": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).",
            "file": "file_downloads/formbricks/new/jwt.test.ts",
            "start_line": 907,
            "end_line": 907,
            "code_snippet": "          TEST_NEXTAUTH_SECRET + mockUser.email"
        },
        {
            "id": 108,
            "message": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).",
            "file": "file_downloads/formbricks/new/jwt.test.ts",
            "start_line": 921,
            "end_line": 921,
            "code_snippet": "          TEST_NEXTAUTH_SECRET + surveyId"
        },
        {
            "id": 109,
            "message": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).",
            "file": "file_downloads/formbricks/new/jwt.test.ts",
            "start_line": 932,
            "end_line": 932,
            "code_snippet": "          TEST_NEXTAUTH_SECRET + mockUser.email"
        }
    ],
    "librechat": [
        {
            "id": 110,
            "message": "Depending on the context, user control data in `Object.assign` can cause web response to include data that it should not have or can lead to a mass assignment vulnerability.",
            "file": "file_downloads/librechat/new/v1.js",
            "start_line": 271,
            "end_line": 274,
            "code_snippet": "    const newAgentData = Object.assign(cloneData, {\n      id: newAgentId,\n      author: userId,\n    });"
        },
        {
            "id": 111,
            "message": "Depending on the context, user control data in `Object.assign` can cause web response to include data that it should not have or can lead to a mass assignment vulnerability.",
            "file": "file_downloads/librechat/old/v1.js",
            "start_line": 61,
            "end_line": 68,
            "code_snippet": "    Object.assign(agentData, {\n      author: userId,\n      name,\n      description,\n      instructions,\n      provider,\n      model,\n    });"
        },
        {
            "id": 112,
            "message": "JSON injection occurs when untrusted input is incorporated into a JavaScript object without proper validation or sanitization. When using methods like Object.assign, malicious input can override or add unintended properties to the object. Attackers may inject properties that alter the application's behavior. Validate the structure and content of input data to ensure it adheres to expected schemas. Reject inputs containing unexpected or disallowed properties.",
            "file": "file_downloads/librechat/old/v1.js",
            "start_line": 61,
            "end_line": 68,
            "code_snippet": "    Object.assign(agentData, {\n      author: userId,\n      name,\n      description,\n      instructions,\n      provider,\n      model,\n    });"
        },
        {
            "id": 113,
            "message": "Depending on the context, user control data in `Object.assign` can cause web response to include data that it should not have or can lead to a mass assignment vulnerability.",
            "file": "file_downloads/librechat/old/v1.js",
            "start_line": 262,
            "end_line": 265,
            "code_snippet": "    const newAgentData = Object.assign(cloneData, {\n      id: newAgentId,\n      author: userId,\n    });"
        }
    ],
    "mondeja": [
        {
            "id": 114,
            "message": "Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.",
            "file": "file_downloads/mondeja/new/event.py",
            "start_line": 286,
            "end_line": 286,
            "code_snippet": "                delimiter_value = locals()[delimiter_name]"
        },
        {
            "id": 115,
            "message": "Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.",
            "file": "file_downloads/mondeja/new/event.py",
            "start_line": 578,
            "end_line": 578,
            "code_snippet": "                delimiter_value = locals()[delimiter_name]"
        },
        {
            "id": 116,
            "message": "Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.",
            "file": "file_downloads/mondeja/old/event.py",
            "start_line": 304,
            "end_line": 304,
            "code_snippet": "                delimiter_value = locals()[delimiter_name]"
        },
        {
            "id": 117,
            "message": "Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.",
            "file": "file_downloads/mondeja/old/event.py",
            "start_line": 596,
            "end_line": 596,
            "code_snippet": "                delimiter_value = locals()[delimiter_name]"
        }
    ],
    "wneessen": [
        {
            "id": 118,
            "message": "When working with web applications that involve rendering user-generated  content, it's important to properly escape any HTML content to prevent  Cross-Site Scripting (XSS) attacks. In Go, the `text/template` package does  not automatically escape HTML content, which can leave your application  vulnerable to these types of attacks. To mitigate this risk, it's  recommended to use the `html/template` package instead, which provides  built-in functionality for HTML escaping. By using `html/template` to render  your HTML content, you can help to ensure that your web application is more  secure and less susceptible to XSS vulnerabilities.",
            "file": "file_downloads/wneessen/new/msg.go",
            "start_line": 28,
            "end_line": 28,
            "code_snippet": "\ttt \"text/template\""
        },
        {
            "id": 119,
            "message": "Detected non-static command inside Command. Audit the input to 'exec.Command'. If unverified user data can reach this call site, this is a code injection vulnerability. A malicious actor can inject a malicious script to execute arbitrary code.",
            "file": "file_downloads/wneessen/new/msg.go",
            "start_line": 2582,
            "end_line": 2582,
            "code_snippet": "\tcmdCtx := exec.CommandContext(ctx, sendmailPath)"
        },
        {
            "id": 120,
            "message": "`MinVersion` is missing from this TLS configuration.  By default, as of Go 1.22, TLS 1.2 is currently used as the minimum. General purpose web applications should default to TLS 1.3 with all other protocols disabled.  Only where it is known that a web server must support legacy clients with unsupported an insecure browsers (such as Internet Explorer 10), it may be necessary to enable TLS 1.0 to provide support. Add `MinVersion: tls.VersionTLS13' to the TLS configuration to bump the minimum version to TLS 1.3.",
            "file": "file_downloads/wneessen/new/smtp.go",
            "start_line": 508,
            "end_line": 508,
            "code_snippet": "\t\tconfig := &tls.Config{ServerName: c.serverName}"
        },
        {
            "id": 121,
            "message": "When working with web applications that involve rendering user-generated  content, it's important to properly escape any HTML content to prevent  Cross-Site Scripting (XSS) attacks. In Go, the `text/template` package does  not automatically escape HTML content, which can leave your application  vulnerable to these types of attacks. To mitigate this risk, it's  recommended to use the `html/template` package instead, which provides  built-in functionality for HTML escaping. By using `html/template` to render  your HTML content, you can help to ensure that your web application is more  secure and less susceptible to XSS vulnerabilities.",
            "file": "file_downloads/wneessen/old/msg.go",
            "start_line": 28,
            "end_line": 28,
            "code_snippet": "\ttt \"text/template\""
        },
        {
            "id": 122,
            "message": "Detected non-static command inside Command. Audit the input to 'exec.Command'. If unverified user data can reach this call site, this is a code injection vulnerability. A malicious actor can inject a malicious script to execute arbitrary code.",
            "file": "file_downloads/wneessen/old/msg.go",
            "start_line": 2579,
            "end_line": 2579,
            "code_snippet": "\tcmdCtx := exec.CommandContext(ctx, sendmailPath)"
        },
        {
            "id": 123,
            "message": "`MinVersion` is missing from this TLS configuration.  By default, as of Go 1.22, TLS 1.2 is currently used as the minimum. General purpose web applications should default to TLS 1.3 with all other protocols disabled.  Only where it is known that a web server must support legacy clients with unsupported an insecure browsers (such as Internet Explorer 10), it may be necessary to enable TLS 1.0 to provide support. Add `MinVersion: tls.VersionTLS13' to the TLS configuration to bump the minimum version to TLS 1.3.",
            "file": "file_downloads/wneessen/old/smtp.go",
            "start_line": 508,
            "end_line": 508,
            "code_snippet": "\t\tconfig := &tls.Config{ServerName: c.serverName}"
        }
    ]
}